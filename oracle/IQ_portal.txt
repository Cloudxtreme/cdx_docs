
Will need:
    4  cores.
    4  GB memory.
   50+ GB disk space.  

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--
-- enable ldap support (NOT Needed!!!)
--
wajig install libpam-ldapd libnss-ldapd libpam-foreground -y

cat > /etc/nslcd.conf <<EOF
uid nslcd
gid nslcd
uri ldap://ldap.cardiodx.com
base dc=cardiodx,dc=com
ssl start_tls
tls_reqcert allow
EOF

/etc/init.d/nslcd restart


--
-- ubuntu packages:
--
wajig install apache2 postgresql memcached \
 dpkg-dev build-essential apache2-prefork-dev libapr1-dev libaprutil1-dev \
 ruby ruby1.8 linux-libc-dev libc6-dev ruby1.8-dev \
 ri1.8 irb1.8 libldap-ruby1.8 libopenssl-ruby libopenssl-ruby1.8 libpgsql-ruby \
 libpgsql-ruby1.8 libreadline-ruby1.8 libruby libruby1.8 libyaml-ruby libzlib-ruby

-- 
-- "portal" user which will run the rails application and own the pgsql database
--
groupadd -g 123 portal
useradd -g 123 -u 123 -d /home/portal -s /bin/bash portal

mkdir /home/portal
chown portal:portal /home/portal/

passwd portal
(p0rta1)

- get the source code
svn co svn://svn/portal/trunk
cd trunk/
tar cvzf ../portal.tgz * --exclude-vcs --exclude=log/*
cd ..
scp portal.tgz root@portal:/home/portal

su - portal
tar zxvf portal.tgz
exit


--
-- ruby (and gems)
--
wget http://rubyforge.org/frs/download.php/70696/rubygems-1.3.7.tgz
tar zxvf rubygems-1.3.7.tgz
cd rubygems-1.3.7/
ruby setup.rb
ln -s /usr/bin/gem1.8 /usr/bin/gem
cd ..

gem install rails -v 2.3.8 --no-rdoc --no-ri
gem install authlogic -v 2.1.6 --no-rdoc --no-ri
gem install bcrypt-ruby -v 2.1.2 --no-rdoc --no-ri
gem install ruby-net-ldap --no-rdoc --no-ri
gem install SyslogLogger --no-rdoc --no-ri
gem install memcache-client -v 1.8.5 --no-rdoc --no-ri
gem install passenger --no-rdoc --no-ri

- other
passenger-install-apache2-module

cat > /etc/apache2/mods-available/passenger.conf<<EOF
PassengerRoot /usr/lib/ruby/gems/1.8/gems/passenger-2.2.15
PassengerRuby /usr/bin/ruby1.8
EOF

cat > /etc/apache2/mods-available/passenger.load<<EOF
LoadModule passenger_module /usr/lib/ruby/gems/1.8/gems/passenger-2.2.15/ext/apache2/mod_passenger.so
EOF

cd /etc/apache2/sites-available/

cat > apache_portal.site<<EOF
<VirtualHost *:80>
  ServerName portal.cardiodx.com
  Redirect / https://portal.cardiodx.com/
</VirtualHost>

<VirtualHost *:443>
  ServerName portal.cardiodx.com
  RailsEnv production

  SSLEngine on
  SSLCertificateFile /etc/apache2/ssl/wildcard.cardiodx.com.crt
  SSLCertificateKeyFile /etc/apache2/ssl/wildcard.cardiodx.com.key
  SSLCertificateChainFile /etc/apache2/ssl/gd_bundle.crt

  RequestHeader set X_FORWARDED_PROTO 'https'
  DocumentRoot /home/portal/public

  ErrorLog "|/usr/bin/logger -p local0.err"
  LogFormat "%v \"%r\" %>s %b \"%{Referer}i\"" privacy_format
  CustomLog "|/usr/bin/logger -p local1.info" privacy_format
</VirtualHost>
EOF

cd /etc/apache2
mkdir ssl
cd ssl

copy the following files over from PDC:
  - wildcard.cardiodx.com.crt
  - wildcard.cardiodx.com.key
  - gd_intermediate_bundle.crt

chmod 660 wildcard.cardiodx.com.key


a2enmod passenger 
a2enmod ssl 
a2enmod headers
a2dissite default
a2ensite apache_portal.site


su - postgres
createuser portal --pwprompt
  Enter password for new role: (p0rta1)
  Shall the new role be a superuser? (y/n) n
  Shall the new role be allowed to create databases? (y/n) y
  Shall the new role be allowed to create more new roles? (y/n) n

su - portal
createdb portaldb
psql portaldb < portal.sql
exit


vi /etc/postgresql/8.4/main/postgresql.conf
#listen_addresses = 'localhost'
listen_addresses = '*' 


(Should only allow ccllims to connect!!!!)
vi /etc/postgresql/8.4/main/pg_hba.conf
local      all         postgres                          ident
hostssl    all         all         127.0.0.1/32          md5
hostssl    all         all         10.10.32.0/21         md5


--psql -h portal -u portal portaldb
psql -h 127.0.0.1 -U portal portaldb


service postgresql-8.4 restart
service apache2 restart


--
-- Backup!!!!
--
vi /etc/ssmtp/ssmtp.conf
mailhub=webmail.cardiodx.com

cd /etc/cron.daily
vi backupdb
#!/bin/bash

LOG=/tmp/backupdb.log
DB=portaldb
MAILTO=it@cardiodx.com
status=0

date > $LOG
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~" >> $LOG

echo "dumping $DB" >> $LOG
#su postgres pg_dump $DB | cat > /root/$DB.sql
su - postgres -c "pg_dump $DB" | cat > /root/$DB.sql 2>&1
if [ $? != 0 ]; then
 echo "Error dumping database for $DB" >> $LOG
 status=1
fi

echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~" >> $LOG
date >> $LOG

mailx -s "`hostname`: daily backup - $DB" $MAILTO < $LOG

exit $status



chmod 700 backupdb

vi /etc/crontab 
17 *    * * *   root    cd / && run-parts --report /etc/cron.hourly
25 2    * * *   root    test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.daily )
47 2    * * 7   root    test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.weekly )
52 2    1 * *   root    test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.monthly )






